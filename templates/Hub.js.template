var _ = require('lodash');
var once = require('once');
var { ErrorHandler } = require('@irysius/anguli-components');
var errorHandler = ErrorHandler.socket;

var <%= hub %>Hub = {
	connect: (socket) => {
		// handle any initialization logic needed when a socket connection is made
		var request = socket.request;
		console.log('socket connected with id: ' + socket.id);
	},
	/*
		All functions on the send object will have the root object mapped to `this`.
		In addition, you will have access to this.socket, and this.io.
		this.socket represents the current socket context, and will be null if called from the server side.
		this.io represents the io namespace this hub was created under, and will always be available.
		No functions on the send object can use the fat arrow syntax (=>) as a result of a dependence on `this`. 
	 */
	send: {
		hello: function () {
			// sends to all clients
			this.io.emit('message', 'hello from io.emit');
			// sends to all sockets except the current one
			this.socket.broadcast.emit('message', 'hello from socket.broadcast.emit');
			// only sends to the current socket
			this.socket.emit('message', 'hello from socket.emit');
		},
		whisper: function (id, data) {
			// wil send message to the specific socket, except the current one
			data = data || 'default whisper';
			this.socket.to(id).emit('whisper', data);
		}
	},
	/*
		All functions on the receive object will have the root object mapped to `this`.
		In addition, you will have access to this.socket, and this.io.
		this.socket represents the current socket context, and will be null if called from the server side.
		this.io represents the io namespace this hub was created under, and will always be available.
		No functions on the send object can use the fat arrow syntax (=>) as a result of a dependence on `this`.
	*/
	receive: {
		// using signature (data, done) => void means you must call done.
		message: function (data, done) {
			var done = once(done);
			console.log('receive message', data);
			this.send.hello();
			done();
		},
		// alternatively you may use (data) => void if client doesn't need confirmation of receipt.
		'chat.whisper': function (data) {
			console.log('receive chat.whisper');
			this.send.whisper(data.target, data.message);
		}
	},
	disconnect: (socket) => {
		// handle any cleanup logic needed when a socket connection is lost
		console.log('socket disconnected with id: ' + socket.id);
	}
};

module.exports = <%= hub %>Hub;